{"version":3,"file":"static/js/637.bc7b173f.chunk.js","mappings":"mXAiBMA,EAAe,CACnBC,MAAO,GACPC,SAAU,IAGG,SAASC,IACtB,OAAgCC,EAAAA,EAAAA,UAASJ,GAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAEMC,GAAUC,EAAAA,EAAAA,MAEVC,EAAe,SAAC,GAAiC,IAAD,IAA9BC,OAAUC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MACtCN,GAAY,SAAAO,GAAY,yBAAUA,GAAV,cAAyBF,EAAOC,EAAME,QAAtC,GACzB,EAEKC,EAAY,mCAAG,8EACnBR,GAAQS,EAAAA,EAAAA,IAAMX,IADK,2CAAH,qDAIlB,OACE,SAAC,IAAD,CAAMY,GAAG,WAAWC,MAAM,SAASC,QAAQ,SAASC,EAAG,QAAvD,UACE,SAAC,KAAD,CAAKH,GAAG,QAAQI,EAAG,EAAGC,QAAQ,KAAKC,EAAG,GAAtC,UACE,SAAC,KAAD,CAAQC,cAAexB,EAAcyB,SAAUV,EAA/C,SACG,gBAAGA,EAAH,EAAGA,aAAcW,EAAjB,EAAiBA,OAAQC,EAAzB,EAAyBA,QAAzB,OACC,iBAAMF,SAAUV,EAAhB,UACE,UAAC,IAAD,CAAQa,QAAS,EAAGV,MAAM,aAA1B,WACE,UAAC,KAAD,YACE,SAAC,IAAD,CAAWW,QAAQ,QAAnB,4BACA,SAAC,KAAD,CACEC,GAAIC,EAAAA,EACJC,GAAG,QACHrB,KAAK,QACLsB,KAAK,QACLC,QAAQ,SACRtB,MAAOP,EAASJ,MAChBkC,SAAU1B,QAGd,UAAC,KAAD,CAAa2B,YAAaV,EAAOxB,UAAYyB,EAAQzB,SAArD,WACE,SAAC,IAAD,CAAW2B,QAAQ,WAAnB,uBACA,SAAC,KAAD,CACEC,GAAIC,EAAAA,EACJC,GAAG,WACHrB,KAAK,WACLsB,KAAK,WACLC,QAAQ,SACRtB,MAAOP,EAASH,SAChBiC,SAAU1B,KAEZ,SAAC,KAAD,UAAmBiB,EAAOxB,eAG5B,SAAC,IAAD,CAAQ+B,KAAK,SAASI,YAAY,SAASC,MAAM,OAAjD,uBA7BL,OAuCV,C","sources":["pages/LoginPage.jsx"],"sourcesContent":["import { Formik, Field } from 'formik';\n\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\nimport { useState } from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/auth-operations';\n\nconst initialState = {\n  email: '',\n  password: '',\n};\n\nexport default function LoginPage() {\n  const [formData, setFormData] = useState(initialState);\n\n  const dispath = useDispatch();\n\n  const handleChange = ({ target: { name, value } }) => {\n    setFormData(prevFormData => ({ ...prevFormData, [name]: value.trim() }));\n  };\n\n  const handleSubmit = async () => {\n    dispath(logIn(formData));\n  };\n\n  return (\n    <Flex bg=\"gray.100\" align=\"center\" justify=\"center\" h={'100vh'}>\n      <Box bg=\"white\" p={6} rounded=\"md\" w={64}>\n        <Formik initialValues={initialState} onSubmit={handleSubmit}>\n          {({ handleSubmit, errors, touched }) => (\n            <form onSubmit={handleSubmit}>\n              <VStack spacing={4} align=\"flex-start\">\n                <FormControl>\n                  <FormLabel htmlFor=\"email\">Email Address</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"email\"\n                    name=\"email\"\n                    type=\"email\"\n                    variant=\"filled\"\n                    value={formData.email}\n                    onChange={handleChange}\n                  />\n                </FormControl>\n                <FormControl isInvalid={!!errors.password && touched.password}>\n                  <FormLabel htmlFor=\"password\">Password</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"password\"\n                    name=\"password\"\n                    type=\"password\"\n                    variant=\"filled\"\n                    value={formData.password}\n                    onChange={handleChange}\n                  />\n                  <FormErrorMessage>{errors.password}</FormErrorMessage>\n                </FormControl>\n\n                <Button type=\"submit\" colorScheme=\"purple\" width=\"full\">\n                  Login\n                </Button>\n              </VStack>\n            </form>\n          )}\n        </Formik>\n      </Box>\n    </Flex>\n  );\n}\n"],"names":["initialState","email","password","LoginPage","useState","formData","setFormData","dispath","useDispatch","handleChange","target","name","value","prevFormData","trim","handleSubmit","logIn","bg","align","justify","h","p","rounded","w","initialValues","onSubmit","errors","touched","spacing","htmlFor","as","Input","id","type","variant","onChange","isInvalid","colorScheme","width"],"sourceRoot":""}