{"version":3,"file":"static/js/818.f4e9f562.chunk.js","mappings":"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","sources":["redux/selectors.js","components/ContactForm/contactForm.jsx","components/Contacts/contacts.styled.jsx","components/ContactForm/updateContactForm.jsx","components/Contacts/ContactList.jsx","components/Filter/filter.jsx","pages/ContactsPage.jsx"],"sourcesContent":["export const selectContacts = (state) => state.contacts.items;\nexport const selectFilter = (state) => state.filter;\nexport const selectIsLoading = (state) => state.contacts.isLoading;\n","import { Formik, Field } from 'formik';\nimport {\n  Button,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  VStack,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n} from '@chakra-ui/react';\n\nimport * as Yup from 'yup';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { selectContacts } from 'redux/selectors';\nimport { postContact } from 'redux/operation';\n\n\nconst validationSchema = Yup.object({\n  name: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required(),\n\n  number: Yup.string()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required(),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport function ContactForm({ onClose }) {\n  const contacts = useSelector(selectContacts);\n\n  const dispath = useDispatch();\n\n  const addContact = contact => {\n    !checkOfValidContact(contact)\n      ? dispath(postContact(contact))\n      : alert(`${contact.name} is olready in contacts.`);\n  };\n\n  const handleSubmit = (value, { resetForm }) => {\n    addContact({ ...value });\n    onClose();\n    resetForm();\n  };\n\n  const checkOfValidContact = value =>\n    contacts.find(\n      contact => contact.name.toLowerCase() === value.name.toLowerCase()\n    );\n\n  return (\n    <>\n      <ModalHeader>Add New Contact</ModalHeader>\n      <ModalCloseButton />\n      <ModalBody pb={6}>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={validationSchema}\n          onSubmit={handleSubmit}\n        >\n          {({ handleSubmit, errors, touched }) => {\n            return (\n              <form onSubmit={handleSubmit}>\n                <VStack spacing={4} align=\"flex-start\">\n                  <FormControl>\n                    <FormLabel htmlFor=\"name\">Name</FormLabel>\n                    <Field\n                      as={Input}\n                      id=\"name\"\n                      type=\"text\"\n                      name=\"name\"\n                      placeholder=\"Name\"\n                    />\n                  </FormControl>\n\n                  <FormControl\n                    isInvalid={!!errors.password && touched.password}\n                  >\n                    <FormLabel htmlFor=\"number\">Number</FormLabel>\n\n                    <Field\n                      as={Input}\n                      id=\"number\"\n                      name=\"number\"\n                      type=\"tel\"\n                      placeholder=\"Number\"\n                    />\n                    <FormErrorMessage>{errors.password}</FormErrorMessage>\n                  </FormControl>\n\n                  <Button type=\"submit\" colorScheme=\"teal\" width=\"full\">\n                    Add contact\n                  </Button>\n                </VStack>\n              </form>\n            );\n          }}\n        </Formik>\n      </ModalBody>\n    </>\n  );\n}\n\n/* <FormControl\n                    isInvalid={!!errors.password && touched.password}\n                  >\n                    <FormLabel htmlFor=\"number\">Phone Number</FormLabel>\n                    <InputMask\n                      mask=\"+380-99-999-99-99\"\n                      onChange={e => setNumber(e.target.value)}\n                    >\n                      {inputProps => (\n                        <Input\n                          id=\"number\"\n                          placeholder=\"+380-__-___-__-__\"\n                          type=\"tel\"\n                          name=\"number\"\n                          value={number}\n                          {...inputProps}\n                        />\n                      )}\n                    </InputMask>\n                  </FormControl> */\n","import styled from 'styled-components';\n\nexport const ContactElement = styled.li`\n  display: flex;\n  align-content: center;\n  margin-bottom: 10px;\n\n  & > span {\n    font-weight: 600;\n    font-size: 25px;\n    margin-right: 10px;\n  }\n  & > button {\n    border-radius: 4px;\n    border: 0;\n    cursor: pointer;\n    border: 1px solid #5eff66;\n  }\n  & > button:hover {\n    box-shadow: inset 0px 0px 52px -5px rgba(0, 255, 13, 0.61);\n  }\n`;\n","import { Formik, Field } from 'formik';\n\nimport {\n  Button,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  VStack,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n} from '@chakra-ui/react';\n\nimport * as Yup from 'yup';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { selectContacts } from 'redux/selectors';\nimport { updateContact } from 'redux/operation';\n\nconst validationSchema = Yup.object({\n  name: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required(),\n\n  number: Yup.string()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required(),\n});\n\nexport function UpdateContactForm({ onClose, currentContact }) {\n  const contacts = useSelector(selectContacts);\n\n  const dispath = useDispatch();\n\n  const refreshContact = contact => {\n    !checkOfValidContact(contact)\n      ? dispath(updateContact(contact))\n      : alert(`${contact.name} is olready in contacts.`);\n  };\n\n  const handleSubmit = (value, { resetForm }) => {\n    refreshContact({ ...value });\n    onClose();\n    resetForm();\n  };\n\n  const checkOfValidContact = value =>\n    contacts.find(\n      contact => contact.name.toLowerCase() === value.name.toLowerCase()\n    );\n\n  return (\n    <>\n      <ModalHeader>Update Contact</ModalHeader>\n      <ModalCloseButton />\n      <ModalBody pb={6}>\n        <Formik\n          initialValues={currentContact}\n          validationSchema={validationSchema}\n          onSubmit={handleSubmit}\n        >\n          {({ handleSubmit, errors, touched }) => (\n            <form onSubmit={handleSubmit}>\n              <VStack spacing={4} align=\"flex-start\">\n                <FormControl>\n                  <FormLabel htmlFor=\"name\">Name</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"name\"\n                    type=\"text\"\n                    name=\"name\"\n                    placeholder=\"Name\"\n                  />\n                </FormControl>\n                <FormControl isInvalid={!!errors.password && touched.password}>\n                  <FormLabel htmlFor=\"number\">Number</FormLabel>\n                  <Field\n                    as={Input}\n                    id=\"number\"\n                    name=\"number\"\n                    type=\"tel\"\n                    placeholder=\"Number\"\n                  />\n                  <FormErrorMessage>{errors.password}</FormErrorMessage>\n                </FormControl>\n\n                <Button type=\"submit\" colorScheme=\"teal\" width=\"full\">\n                  Update contact\n                </Button>\n              </VStack>\n            </form>\n          )}\n        </Formik>\n      </ModalBody>\n    </>\n  );\n}\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { ContactElement } from './contacts.styled';\nimport { selectContacts, selectFilter, selectIsLoading } from 'redux/selectors';\nimport { deleteContact } from 'redux/operation';\nimport HashLoader from 'react-spinners/HashLoader';\nimport { UpdateContactForm } from 'components/ContactForm/updateContactForm';\nimport {\n  Modal,\n  ModalContent,\n  ModalOverlay,\n  Spacer,\n  useDisclosure,\n} from '@chakra-ui/react';\n\nexport function ContactList() {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const isLoading = useSelector(selectIsLoading);\n  const [btnLoad, setBtnLoad] = useState('');\n\n  const [currentContact, setCurrentContact] = useState({\n    name: '',\n    number: '',\n    id: '',\n  });\n\n  const dispath = useDispatch();\n  const getFilteredContacts = contacts.filter(({ name }) =>\n    name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  const onDeleteContact = (id, e) => {\n    setBtnLoad(e.target.name);\n    dispath(deleteContact(id));\n  };\n\n  const onUpdate = contact => {\n    onOpen();\n\n    setCurrentContact(state => (state = { ...contact }));\n  };\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <div>\n      <ul>\n        {getFilteredContacts.map(contact => (\n          <ContactElement key={contact.id}>\n            <span>{contact.name}: </span>\n            <span>{contact.number} </span>\n            <Spacer />\n            <button onClick={() => onUpdate({ ...contact })}>Update</button>\n            <button\n              style={{\n                width: 55,\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                marginLeft: 10,\n              }}\n              type=\"button\"\n              name={contact.id}\n              onClick={e => onDeleteContact(contact.id, e)}\n            >\n              {isLoading && btnLoad === contact.id ? (\n                <HashLoader\n                  color=\"green\"\n                  loading=\"true\"\n                  size={25}\n                  aria-label=\"Loading Spinner\"\n                  data-testid=\"loader\"\n                />\n              ) : (\n                'Delete'\n              )}\n            </button>\n          </ContactElement>\n        ))}\n      </ul>\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <UpdateContactForm\n            currentContact={currentContact}\n            onClose={onClose}\n          />\n        </ModalContent>\n      </Modal>\n    </div>\n  );\n}\n","import { AddIcon } from '@chakra-ui/icons';\nimport { Button, FormLabel, Input } from '@chakra-ui/react';\nimport { useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/filterSlice';\n\nexport function Filter({ onOpen }) {\n  const dispath = useDispatch();\n\n  return (\n    <>\n      <div\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n        }}\n      >\n        <span>AddContact</span>\n        <Button onClick={onOpen}>\n          <AddIcon />\n        </Button>\n      </div>\n\n      <div\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n        }}\n      >\n        <FormLabel>Search Contact</FormLabel>\n        <Input\n          as={Input}\n          id=\"text\"\n          name=\"text\"\n          type=\"text\"\n          variant=\"filled\"\n          placeholder=\"Search\"\n          onChange={e => {\n            changeFilter(dispath(changeFilter(e.target.value.trim())));\n          }}\n          style={{\n            width: '100%',\n          }}\n        />\n      </div>\n    </>\n  );\n}\n","import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { selectContacts } from 'redux/selectors';\nimport { fetchContacts } from 'redux/operation';\nimport { ContactForm } from 'components/ContactForm/contactForm';\nimport { ContactList } from 'components/Contacts/ContactList';\nimport { Filter } from 'components/Filter/filter';\nimport authSelectors from 'redux/auth/auth-selectors';\nimport { token } from 'redux/auth/auth-operations';\nimport {\n  Button,\n  Modal,\n  ModalContent,\n  ModalOverlay,\n  useDisclosure,\n} from '@chakra-ui/react';\nimport { AddIcon } from '@chakra-ui/icons';\n\nconst ContactsPage = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoggedIn = useSelector(authSelectors.selectToken);\n  const dispath = useDispatch();\n\n  const isHaveToken = useSelector(authSelectors.selectToken);\n  isHaveToken && token.set(isHaveToken);\n\n  useEffect(() => {\n    isLoggedIn && dispath(fetchContacts());\n  }, [dispath, isLoggedIn]);\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <div style={{ padding: 10, display: 'flex' }}>\n      <div\n        style={{\n          width: 500,\n        }}\n      >\n        {contacts.length > 0 ? (\n          <>\n            <Filter onOpen={onOpen} />\n            <ContactList />\n          </>\n        ) : (\n          <>\n            <div\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n                gap: '10px',\n              }}\n            >\n              <span>AddContact</span>\n              <Button onClick={onOpen}>\n                <AddIcon />\n              </Button>\n            </div>\n            <p>You have no contacts on phonebook yet</p>\n          </>\n        )}\n      </div>\n\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ContactForm onClose={onClose} />\n        </ModalContent>\n      </Modal>\n    </div>\n  );\n};\nexport default ContactsPage;\n"],"names":["selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","validationSchema","Yup","name","matches","required","number","initialValues","ContactForm","onClose","useSelector","dispath","useDispatch","checkOfValidContact","value","find","contact","toLowerCase","pb","onSubmit","resetForm","alert","postContact","handleSubmit","errors","touched","spacing","align","htmlFor","as","Input","id","type","placeholder","isInvalid","password","colorScheme","width","ContactElement","styled","UpdateContactForm","currentContact","updateContact","ContactList","useState","btnLoad","setBtnLoad","setCurrentContact","getFilteredContacts","includes","useDisclosure","isOpen","onOpen","map","onClick","onUpdate","style","display","justifyContent","alignItems","marginLeft","e","target","deleteContact","onDeleteContact","color","loading","size","Filter","I","variant","onChange","changeFilter","trim","isLoggedIn","authSelectors","isHaveToken","token","useEffect","fetchContacts","padding","length","gap"],"sourceRoot":""}